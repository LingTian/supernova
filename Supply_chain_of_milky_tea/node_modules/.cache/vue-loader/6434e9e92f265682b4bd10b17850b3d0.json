{"remainingRequest":"/home/hong/code/Supply_chain_of_milky_tea/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/hong/code/Supply_chain_of_milky_tea/src/components/Voting.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/hong/code/Supply_chain_of_milky_tea/src/components/Voting.vue","mtime":1564828008616},{"path":"/home/hong/code/Supply_chain_of_milky_tea/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hong/code/Supply_chain_of_milky_tea/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hong/code/Supply_chain_of_milky_tea/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hong/code/Supply_chain_of_milky_tea/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nconst { createU3, U3Utils } = require(\"u3.js\");\nconst config = require(\"../../config\");\nexport default {\n  name: \"Voting\",\n  data() {\n    return {\n      candidate: \"\",\n      voteFormShow: false,\n      votes: [],\n      candidates: [],\n      voterName: \"\",\n      privateKey: \"\",\n      showLoading: false\n    };\n  },\n  mounted() {\n    let func = async () => {\n      let account = \"ben\";\n      const u3 = createU3(config);\n      const canditable = \"candidate\";\n      const candiscope = \"s.candidate\";\n      let candidates = await u3.getTableRecords({\n        \"json\": true,\n        \"code\": account,\n        \"scope\": candiscope,\n        \"table\": canditable\n      });\n      this.candidates = candidates.rows;\n\n      const votestable = \"votes\";\n      const votesscope = \"s.votes\";\n      let votes = await u3.getTableRecords({\n        \"json\": true,\n        \"code\": account,\n        \"scope\": votesscope,\n        \"table\": votestable\n      });\n      this.votes = votes.rows.sort(this.compare);\n    };\n    func();\n  },\n  methods: {\n    goToVote() {\n      this.voteFormShow = true;\n    },\n    compare(a, b) {\n      let comparison = 0;\n      if (a.count > b.count) {\n        comparison = -1;\n      } else if (b.count > a.count) {\n        comparison = 1;\n      }\n      return comparison;\n    },\n    async vote() {\n      if (this.candidate) {\n        let creator = \"ben\";\n        config.keyProvider = this.privateKey;\n        const u3 = createU3(config);\n        let contract = await u3.contract(creator);\n        let result = await contract.vote(this.candidate, { authorization: this.voterName + \"@active\" });\n        this.showLoading = true;\n\n        // first check whether the transaction was failed\n        if (!result || result.processed.receipt.status !== \"executed\") {\n          //console.log(\"the transaction was failed\");\n          alert(\"Voted failed\");\n          this.showLoading = false;\n          return;\n        }\n\n        // then check whether the transaction was irreversible when it was not expired\n        let timeout = new Date(result.transaction.transaction.expiration + \"Z\") - new Date();\n        let finalResult = false;\n        try {\n          await U3Utils.test.waitUntil(async () => {\n            let tx = await u3.getTxByTxId(result.transaction_id);\n            finalResult = tx && tx.irreversible;\n            if (finalResult) {\n              this.showLoading = false;\n              alert(\"Voted success\");\n              document.location.reload();\n\n              return true;\n            }\n          }, timeout, 1000);\n        } catch (e) {\n          //console.log(finalResult);\n        }\n\n      }\n    }\n  }\n};\n",{"version":3,"sources":["Voting.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Voting.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"main\">\n        <h1>Voting Result</h1>\n        <table border=\"1\">\n            <thead>\n            <tr>\n                <th>NO.</th>\n                <th>Candidate</th>\n                <th>Count</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr v-bind:key=\"v.name\" v-for=\"(v,index) in votes\">\n                <td>{{index+1}}</td>\n                <td>{{v.name}}</td>\n                <td>{{v.count}}</td>\n            </tr>\n            </tbody>\n        </table>\n        <h4>All candidates</h4>\n        <div class=\"form-inline\">\n            <select v-model=\"candidate\">\n                <option value=\"\">Choose a candidate</option>\n                <option v-bind:key=\"c.name\" v-for=\"c in candidates\">{{c.name}}</option>\n            </select>\n        </div>\n\n        <div class=\"go-to-vote\" @click=\"goToVote()\">Start voting</div>\n        <div class=\"vote-form\" v-show=\"voteFormShow\">\n            <div class=\"form-inline\">\n                <label>Voter</label><input v-model=\"voterName\"/>\n            </div>\n            <div class=\"form-inline\">\n                <label>PrivateKey</label><input v-model=\"privateKey\"/>\n            </div>\n            <button :disabled=\"showLoading\" v-show=\"candidate\" class=\"vote-btn\" @click=\"vote()\">{{\n                showLoading?\"waiting...\":\"Send votes\" }}\n            </button>\n        </div>\n    </div>\n</template>\n\n<script>\n  const { createU3, U3Utils } = require(\"u3.js\");\n  const config = require(\"../../config\");\n  export default {\n    name: \"Voting\",\n    data() {\n      return {\n        candidate: \"\",\n        voteFormShow: false,\n        votes: [],\n        candidates: [],\n        voterName: \"\",\n        privateKey: \"\",\n        showLoading: false\n      };\n    },\n    mounted() {\n      let func = async () => {\n        let account = \"ben\";\n        const u3 = createU3(config);\n        const canditable = \"candidate\";\n        const candiscope = \"s.candidate\";\n        let candidates = await u3.getTableRecords({\n          \"json\": true,\n          \"code\": account,\n          \"scope\": candiscope,\n          \"table\": canditable\n        });\n        this.candidates = candidates.rows;\n\n        const votestable = \"votes\";\n        const votesscope = \"s.votes\";\n        let votes = await u3.getTableRecords({\n          \"json\": true,\n          \"code\": account,\n          \"scope\": votesscope,\n          \"table\": votestable\n        });\n        this.votes = votes.rows.sort(this.compare);\n      };\n      func();\n    },\n    methods: {\n      goToVote() {\n        this.voteFormShow = true;\n      },\n      compare(a, b) {\n        let comparison = 0;\n        if (a.count > b.count) {\n          comparison = -1;\n        } else if (b.count > a.count) {\n          comparison = 1;\n        }\n        return comparison;\n      },\n      async vote() {\n        if (this.candidate) {\n          let creator = \"ben\";\n          config.keyProvider = this.privateKey;\n          const u3 = createU3(config);\n          let contract = await u3.contract(creator);\n          let result = await contract.vote(this.candidate, { authorization: this.voterName + \"@active\" });\n          this.showLoading = true;\n\n          // first check whether the transaction was failed\n          if (!result || result.processed.receipt.status !== \"executed\") {\n            //console.log(\"the transaction was failed\");\n            alert(\"Voted failed\");\n            this.showLoading = false;\n            return;\n          }\n\n          // then check whether the transaction was irreversible when it was not expired\n          let timeout = new Date(result.transaction.transaction.expiration + \"Z\") - new Date();\n          let finalResult = false;\n          try {\n            await U3Utils.test.waitUntil(async () => {\n              let tx = await u3.getTxByTxId(result.transaction_id);\n              finalResult = tx && tx.irreversible;\n              if (finalResult) {\n                this.showLoading = false;\n                alert(\"Voted success\");\n                document.location.reload();\n\n                return true;\n              }\n            }, timeout, 1000);\n          } catch (e) {\n            //console.log(finalResult);\n          }\n\n        }\n      }\n    }\n  };\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n    .main {\n        text-align: left;\n        padding: 0 40%;\n    }\n\n    .go-to-vote, .vote-btn {\n        margin: 30px 0;\n        padding: 3px 8px;\n        width: 100px;\n        border: 1px solid rgba(177, 177, 177, 0.85);\n        -webkit-border-radius: 5px;\n        -moz-border-radius: 5px;\n        border-radius: 5px;\n        cursor: pointer;\n    }\n\n    .vote-form .form-inline {\n        display: inline-block;\n        margin: 5px 0;\n    }\n\n    .vote-form .form-inline label {\n        width: 75px;\n        display: inline-block;\n    }\n</style>\n"]}]}